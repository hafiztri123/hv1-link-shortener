services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - ANALYTICS_DB=${ANALYTICS_DB}
      - TRANSACTION_DB=${TRANSACTION_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5


  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping      
      interval: 10s
      timeout: 10s
      retries: 5

  migrate:
    build:
      context: .
      dockerfile: docker/migrate.Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - TRANSACTION_DB=${TRANSACTION_DB}
      - DB_SSL=disable
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${TRANSACTION_DB}?sslmode=disable",
      "up"
    ]
    restart: on-failure
  app:
      build:
        context: .
        dockerfile: docker/app.Dockerfile
      depends_on:
        db:
          condition: service_healthy
        redis:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        worker:
          condition: service_started
      ports:
        - "8080:8080"
      environment:
        - DB_HOST=db
        - RABBITMQ_HOST=rabbitmq
        - REDIS_HOST=redis
      env_file:
        - .env
      restart: always

  worker:
      build:
        context: .                         
        dockerfile: docker/worker.Dockerfile  
      depends_on:
        db:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
      env_file:
        - .env
      environment:
        - DB_HOST=db
        - RABBITMQ_HOST=rabbitmq
        - REDIS_HOST=redis
      restart: always
      deploy:
        replicas: 2  

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

